# Первая часть
1. В папке jupyter содержатся блокноты с выполнением первого задания.
2. Исходные данные (ga_hits-002.pkl, ga_sessions.pkl) необходимо разместить в ProjectFinal/data/pkl/
3. Обработанные данные (result_ga_hits.pkl, result_ga_hits.pkl) будут формироваться в
   pkl файлы в папку ProjectFinal/data


# Вторая часть
1. Создаем базу данных sql/setting_db.sql
2. Добавляем в базу Адм. функции .setting/sql_admin_core.sql
3. Проверяем создать в базе тестовую таблицу create_table.py

4. Создаем таблицу аудита json_load_audit из create_table_audit_json.py
5. Создаем таблицу событий ga_sessions из create_table_sessins.py (она имеет первичный ключ)
6. Создаем таблицу визитов ga_hits из create_table_hits.py (связывается с sessions по вторичному ключу)

7. Удалить тестовые таблицы delete_test_table.py

8. В файл \Program Files\JetBrains\PyCharm Community Edition 2022.3\plugins\python-ce\helpers\typeshed\stdlib\json\decoder.pyi
   добавлено def FLOAT_REPR(x):
                  return None

Принцип обработки данных на сервисе json_load
(может работать как через запуск файла сценария так и через Dag-файл Airflow по расписанию)

1. Новые файлы для загрузки размещаются в папке data/lte/new
2. После запуска сценария (через скрипт или по расписанию) начинается обработка JSON файлов:
2.1. Сценарий сканирует папку data/lte/new и выбирает только JSON файлы
2.2. Сначала идет загрузка JSON файлов в имени которых содержится "sessions"
2.3. Далее загружаются JSON файлы в имени которых содержится "hits"

3. На первом этапе осуществляется проверка загрузки JSON файла в базу данных:
3.1. Производится сверка с таблицей аудита по имени файла
3.2. Если файл с таким именем присутствует в таблице аудита, он не загружается
     и в лог создается соответствующая запись.

4. Если проверка этапа 3 пройдена файл загружается в базу данных.
5. Принцип записи: Одна строка - один коммит, чтобы не отклонять загрузку
   целого файла (данные могут быть важны)
6. В случае возникновения ошибки при загрузки отдельной строки,
   в логе будет подробное описание ошибки.
7. По данным записям  с ошибками можно будет принимать отдельные решения.
8. По итогу загрузки в лог заносятся записи о количестве загруженных строк.

9. Интерактивный режим работы (оповещение пользователя в режиме реального времени)
   полностью отключен. Так как сценарий будет работать как сервис, ведет подробное
   логирование, : время, место вызова, имя класса, имя функции:номер строки.
   Все ошибки сторонних библиотек, перехватываются и записываются в лог.

10. В проекте сохранен лог последней загрузки в папке log

11. После обработки JSON файла, он переименовывается - добавляется префикс "loaded_"
    и загруженный файл перемещается в папку data/lte/loaded

12. В проекте имеются наработки, по использованию JSON-схемы и валидации входящих
    JSON файлов на основе JSON-схемы. Но так как информация, на этой стадии, по структуре
    JSON файла лишь косвенная, то эта разработка пока отложена.

